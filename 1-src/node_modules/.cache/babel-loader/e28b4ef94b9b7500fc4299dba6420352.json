{"ast":null,"code":"// https://gist.githubusercontent.com/wlzla000/bac83df6d3c51916c4dd0bc947e46947/raw/7ee3462b095ab22580ddaf191f44a590da6fe33b/RIPEMD-160.js\n\n/*\n\tRIPEMD-160.js\n\n\t\tdeveloped\n\t\t\tby K. (https://github.com/wlzla000)\n\t\t\ton December 27-29, 2017,\n\n\t\tlicensed under\n\n\n\t\tthe MIT license\n\n\t\tCopyright (c) 2017 K.\n\n\t\t Permission is hereby granted, free of charge, to any person\n\t\tobtaining a copy of this software and associated documentation\n\t\tfiles (the \"Software\"), to deal in the Software without\n\t\trestriction, including without limitation the rights to use,\n\t\tcopy, modify, merge, publish, distribute, sublicense, and/or\n\t\tsell copies of the Software, and to permit persons to whom the\n\t\tSoftware is furnished to do so, subject to the following\n\t\tconditions:\n\n\t\t The above copyright notice and this permission notice shall be\n\t\tincluded in all copies or substantial portions of the Software.\n\n\t\t THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t\tEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\t\tOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t\tNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\t\tHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\t\tWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\t\tFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\t\tOTHER DEALINGS IN THE SOFTWARE.\n*/\n\"use strict\";\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar RIPEMD160 = function () {\n  function RIPEMD160() {\n    // https://webcache.googleusercontent.com/search?q=cache:CnLOgolTHYEJ:https://www.cosic.esat.kuleuven.be/publications/article-317.pdf\n    // http://shodhganga.inflibnet.ac.in/bitstream/10603/22978/13/13_appendix.pdf\n    _classCallCheck(this, RIPEMD160);\n  }\n\n  _createClass(RIPEMD160, null, [{\n    key: \"get_n_pad_bytes\",\n    value: function get_n_pad_bytes(message_size\n    /* in bytes, 1 byte is 8 bits. */\n    ) {\n      //  Obtain the number of bytes needed to pad the message.\n      // It does not contain the size of the message size information.\n\n      /*\n      \thttps://webcache.googleusercontent.com/search?q=cache:CnLOgolTHYEJ:https://www.cosic.esat.kuleuven.be/publications/article-317.pdf\n      \t\tThe Cryptographic Hash Function RIPEMD-160\n      \t\twritten by\n      \t\tBart Preneel,\n      \t\tHans Dobbertin,\n      \t\tAntoon Bosselaers\n      \tin\n      \t\t1997.\n      \t\t--------------------------------------------------\n      \t\t§5     Description of RIPEMD-160\n      \t\t......\n      \t\t In order to guarantee that the total input size is a\n      \tmultiple of 512 bits, the input is padded in the same\n      \tway as for all the members of the MD4-family: one\n      \tappends a single 1 followed by a string of 0s (the\n      \tnumber of 0s lies between 0 and 511); the last 64 bits\n      \tof the extended input contain the binary representation\n      \tof the input size in bits, least significant byte first.\n      */\n\n      /*\n      \thttps://tools.ietf.org/rfc/rfc1186.txt\n      \t\tRFC 1186: MD4 Message Digest Algorithm.\n      \t\twritten by\n      \t\tRonald Linn Rivest\n      \tin\n      \t\tOctober 1990.\n      \t\t--------------------------------------------------\n      \t\t§3     MD4 Algorithm Description\n      \t\t......\n      \t\tStep 1. Append padding bits\n      \t\t The message is \"padded\" (extended) so that its length\n      \t(in bits) is congruent to 448, modulo 512. That is, the\n      \tmessage is extended so that it is just 64 bits shy of\n      \tbeing a multiple of 512 bits long. Padding is always\n      \tperformed, even if the length of the message is already\n      \tcongruent to 448, modulo 512 (in which case 512 bits of\n      \tpadding are added).\n      \t\t Padding is performed as follows: a single \"1\" bit is\n      \tappended to the message, and then enough zero bits are\n      \tappended so that the length in bits of the padded\n      \tmessage becomes congruent to 448, modulo 512.\n      \t\tStep 2. Append length\n      \t\t A 64-bit representation of b (the length of the message\n      \tbefore the padding bits were added) is appended to the\n      \tresult of the previous step. In the unlikely event that\n      \tb is greater than 2^64, then only the low-order 64 bits\n      \tof b are used. (These bits are appended as two 32-bit\n      \twords and appended low-order word first in accordance\n      \twith the previous conventions.)\n      \t\t At this point the resulting message (after padding with\n      \tbits and with b) has a length that is an exact multiple\n      \tof 512 bits. Equivalently, this message has a length\n      \tthat is an exact multiple of 16 (32-bit) words. Let\n      \tM[0 ... N-1] denote the words of the resulting message,\n      \twhere N is a multiple of 16.\n      */\n      // https://crypto.stackexchange.com/a/32407/54568\n\n      /*\n      \tExample case  # 1\n      \t\t[0 bit: message.]\n      \t\t[1 bit: 1.]\n      \t\t[447 bits: 0.]\n      \t\t[64 bits: message size information.]\n      \t\tExample case  # 2\n      \t\t[512-bits: message]\n      \t\t[1 bit: 1.]\n      \t\t[447 bits: 0.]\n      \t\t[64 bits: message size information.]\n      \t\tExample case  # 3\n      \t\t[(512 - 64 = 448) bits: message.]\n      \t\t[1 bit: 1.]\n      \t\t[511 bits: 0.]\n      \t\t[64 bits: message size information.]\n      \t\tExample case  # 4\n      \t\t[(512 - 65 = 447) bits: message.]\n      \t\t[1 bit: 1.]\n      \t\t[0 bit: 0.]\n      \t\t[64 bits: message size information.]\n      */\n      // The number of padding zero bits:\n      //      511 - [{(message size in bits) + 64} (mod 512)]\n      return 64 - (message_size + 8 & 63\n      /* 63 */\n      );\n    }\n  }, {\n    key: \"pad\",\n    value: function pad(message\n    /* An ArrayBuffer. */\n    ) {\n      var message_size = message.byteLength;\n      var n_pad = RIPEMD160.get_n_pad_bytes(message_size); //  `Number.MAX_SAFE_INTEGER` is ((2 ** 53) - 1) and\n      // bitwise operation in Javascript is done on 32-bits operands.\n\n      var divmod = function divmod(dividend, divisor) {\n        return [Math.floor(dividend / divisor), dividend % divisor];\n      };\n      /*\n      To shift\n        00000000 000????? ???????? ???????? ???????? ???????? ???????? ????????\n                                         t o\n       00000000 ???????? ???????? ???????? ???????? ???????? ???????? ?????000\n      --------------------------------------------------------------------------------\n      Method #1\n         00000000 000????? ???????? ????????  ???????? ???????? ???????? ????????\n       [00000000 000AAAAA AAAAAAAA AAAAAAAA] (<A> captured)\n       [00000000 AAAAAAAA AAAAAAAA AAAAA000] (<A> shifted)\n                             (<B> captured) [BBBBBBBB BBBBBBBB BBBBBBBB BBBBBBBB]\n                         (<B> shifted) [BBB][BBBBBBBB BBBBBBBB BBBBBBBB BBBBB000]\n       [00000000 AAAAAAAA AAAAAAAA AAAAABBB] (<A> & <B_2> merged)\n       [00000000 AAAAAAAA AAAAAAAA AAAAABBB][BBBBBBBB BBBBBBBB BBBBBBBB BBBBB000]\n        00000000 ???????? ???????? ????????  ???????? ???????? ???????? ?????000\n      \tconst uint32_max_plus_1 = 0x100000000; // (2 ** 32)\n      const [\n      \tmsg_byte_size_most, // Value range [0, (2 ** 21) - 1].\n      \tmsg_byte_size_least // Value range [0, (2 ** 32) - 1].\n      ] = divmod(message_size, uint32_max_plus_1);\n      const [\n      \tcarry, // Value range [0, 7].\n      \tmsg_bit_size_least // Value range [0, (2 ** 32) - 8].\n      ] = divmod(message_byte_size_least * 8, uint32_max_plus_1);\n      const message_bit_size_most = message_byte_size_most * 8\n      \t+ carry; // Value range [0, (2 ** 24) - 1].\n      --------------------------------------------------------------------------------\n      Method #2\n        00000000 000????? ???????? ????????  ???????? ???????? ???????? ????????\n          [00000 000AAAAA AAAAAAAA AAAAAAAA  AAA] (<A> captured)\n                             (<B> captured) [000BBBBB BBBBBBBB BBBBBBBB BBBBBBBB]\n                              (<B> shifted) [BBBBBBBB BBBBBBBB BBBBBBBB BBBBB000]\n       [00000000 AAAAAAAA AAAAAAAA AAAAAAAA][BBBBBBBB BBBBBBBB BBBBBBBB BBBBB000]\n        00000000 ???????? ???????? ????????  ???????? ???????? ???????? ?????000\n      \t*/\n\n\n      var _divmod$map = divmod(message_size, 536870912\n      /* (2 ** 29) */\n      ).map(function (x, index) {\n        return index ? x * 8 : x;\n      }),\n          _divmod$map2 = _slicedToArray(_divmod$map, 2),\n          msg_bit_size_most = _divmod$map2[0],\n          msg_bit_size_least = _divmod$map2[1]; // `ArrayBuffer.transfer()` is not supported.\n\n\n      var padded = new Uint8Array(message_size + n_pad + 8);\n      padded.set(new Uint8Array(message), 0);\n      var data_view = new DataView(padded.buffer);\n      data_view.setUint8(message_size, 128);\n      data_view.setUint32(message_size + n_pad, msg_bit_size_least, true // Little-endian\n      );\n      data_view.setUint32(message_size + n_pad + 4, msg_bit_size_most, true // Little-endian\n      );\n      return padded.buffer;\n    }\n  }, {\n    key: \"f\",\n    value: function f(j, x, y, z) {\n      if (0 <= j && j <= 15) {\n        // Exclusive-OR\n        return x ^ y ^ z;\n      }\n\n      if (16 <= j && j <= 31) {\n        // Multiplexing (muxing)\n        return x & y | ~x & z;\n      }\n\n      if (32 <= j && j <= 47) {\n        return (x | ~y) ^ z;\n      }\n\n      if (48 <= j && j <= 63) {\n        // Multiplexing (muxing)\n        return x & z | y & ~z;\n      }\n\n      if (64 <= j && j <= 79) {\n        return x ^ (y | ~z);\n      }\n    }\n  }, {\n    key: \"K\",\n    value: function K(j) {\n      if (0 <= j && j <= 15) {\n        return 0x00000000;\n      }\n\n      if (16 <= j && j <= 31) {\n        // Math.floor((2 ** 30) * Math.SQRT2)\n        return 0x5A827999;\n      }\n\n      if (32 <= j && j <= 47) {\n        // Math.floor((2 ** 30) * Math.sqrt(3))\n        return 0x6ED9EBA1;\n      }\n\n      if (48 <= j && j <= 63) {\n        // Math.floor((2 ** 30) * Math.sqrt(5))\n        return 0x8F1BBCDC;\n      }\n\n      if (64 <= j && j <= 79) {\n        // Math.floor((2 ** 30) * Math.sqrt(7))\n        return 0xA953FD4E;\n      }\n    }\n  }, {\n    key: \"KP\",\n    value: function KP(j) // K'\n    {\n      if (0 <= j && j <= 15) {\n        // Math.floor((2 ** 30) * Math.cbrt(2))\n        return 0x50A28BE6;\n      }\n\n      if (16 <= j && j <= 31) {\n        // Math.floor((2 ** 30) * Math.cbrt(3))\n        return 0x5C4DD124;\n      }\n\n      if (32 <= j && j <= 47) {\n        // Math.floor((2 ** 30) * Math.cbrt(5))\n        return 0x6D703EF3;\n      }\n\n      if (48 <= j && j <= 63) {\n        // Math.floor((2 ** 30) * Math.cbrt(7))\n        return 0x7A6D76E9;\n      }\n\n      if (64 <= j && j <= 79) {\n        return 0x00000000;\n      }\n    }\n  }, {\n    key: \"add_modulo32\",\n    value: function add_modulo32()\n    /* ...... */\n    {\n      // 1.  Modulo addition (addition modulo) is associative.\n      //    https://proofwiki.org/wiki/Modulo_Addition_is_Associative\n      // 2.  Bitwise operation in Javascript\n      //    is done on 32-bits operands\n      //    and results in a 32-bits value.\n      return Array.from(arguments).reduce(function (a, b) {\n        return a + b;\n      }, 0) | 0;\n    }\n  }, {\n    key: \"rol32\",\n    value: function rol32(value, count) {\n      // Cyclic left shift (rotate) on 32-bits value.\n      return value << count | value >>> 32 - count;\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(message\n    /* An ArrayBuffer. */\n    ) {\n      //////////       Padding       //////////\n      // The padded message.\n      var padded = RIPEMD160.pad(message); //////////     Compression     //////////\n      // Message word selectors.\n\n      var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\n      var rP = [// r'\n      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]; // Amounts for 'rotate left' operation.\n\n      var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\n      var sP = [// s'\n      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]; // The size, in bytes, of a word.\n\n      var word_size = 4; // The size, in bytes, of a 16-words block.\n\n      var block_size = 64; // The number of the 16-words blocks.\n\n      var t = padded.byteLength / block_size; //  The message after padding consists of t 16-word blocks that\n      // are denoted with X_i[j], with 0≤i≤(t − 1) and 0≤j≤15.\n\n      var X = new Array(t).fill(undefined).map(function (_, i) {\n        return function (j) {\n          return new DataView(padded, i * block_size, block_size).getUint32(j * word_size, true // Little-endian\n          );\n        };\n      }); //  The result of RIPEMD-160 is contained in five 32-bit words,\n      // which form the internal state of the algorithm. The final\n      // content of these five 32-bit words is converted to a 160-bit\n      // string, again using the little-endian convention.\n\n      var h = [0x67452301, // h_0\n      0xEFCDAB89, // h_1\n      0x98BADCFE, // h_2\n      0x10325476, // h_3\n      0xC3D2E1F0 // h_4\n      ];\n\n      for (var i = 0; i < t; ++i) {\n        var A = h[0],\n            B = h[1],\n            C = h[2],\n            D = h[3],\n            E = h[4];\n        var AP = A,\n            BP = B,\n            CP = C,\n            DP = D,\n            EP = E;\n\n        for (var j = 0; j < 80; ++j) {\n          // Left rounds\n          var _T = RIPEMD160.add_modulo32(RIPEMD160.rol32(RIPEMD160.add_modulo32(A, RIPEMD160.f(j, B, C, D), X[i](r[j]), RIPEMD160.K(j)), s[j]), E);\n\n          A = E;\n          E = D;\n          D = RIPEMD160.rol32(C, 10);\n          C = B;\n          B = _T; // Right rounds\n\n          _T = RIPEMD160.add_modulo32(RIPEMD160.rol32(RIPEMD160.add_modulo32(AP, RIPEMD160.f(79 - j, BP, CP, DP), X[i](rP[j]), RIPEMD160.KP(j)), sP[j]), EP);\n          AP = EP;\n          EP = DP;\n          DP = RIPEMD160.rol32(CP, 10);\n          CP = BP;\n          BP = _T;\n        }\n\n        var T = RIPEMD160.add_modulo32(h[1], C, DP);\n        h[1] = RIPEMD160.add_modulo32(h[2], D, EP);\n        h[2] = RIPEMD160.add_modulo32(h[3], E, AP);\n        h[3] = RIPEMD160.add_modulo32(h[4], A, BP);\n        h[4] = RIPEMD160.add_modulo32(h[0], B, CP);\n        h[0] = T;\n      } //  The final output string then consists of the concatenatation\n      // of h_0, h_1, h_2, h_3, and h_4 after converting each h_i to a\n      // 4-byte string using the little-endian convention.\n\n\n      var result = new ArrayBuffer(20);\n      var data_view = new DataView(result);\n      h.forEach(function (h_i, i) {\n        return data_view.setUint32(i * 4, h_i, true);\n      });\n      return result;\n    }\n  }]);\n\n  return RIPEMD160;\n}();\n\nmodule.exports = {\n  RIPEMD160: RIPEMD160\n};","map":{"version":3,"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","RIPEMD160","get_n_pad_bytes","message_size","pad","message","byteLength","n_pad","divmod","dividend","divisor","Math","floor","_divmod$map","map","x","index","_divmod$map2","msg_bit_size_most","msg_bit_size_least","padded","Uint8Array","set","data_view","DataView","buffer","setUint8","setUint32","f","j","y","z","K","KP","add_modulo32","from","arguments","reduce","a","b","rol32","count","hash","r","rP","s","sP","word_size","block_size","t","X","fill","_","getUint32","h","A","B","C","D","E","AP","BP","CP","DP","EP","_T","T","result","ArrayBuffer","forEach","h_i","module","exports"],"sources":["/Users/j/Code/ore-test-barebones-node-v14/create-react-app/react-app-test/node_modules/eosjs/dist/ripemd.js"],"sourcesContent":["// https://gist.githubusercontent.com/wlzla000/bac83df6d3c51916c4dd0bc947e46947/raw/7ee3462b095ab22580ddaf191f44a590da6fe33b/RIPEMD-160.js\n\n/*\n\tRIPEMD-160.js\n\n\t\tdeveloped\n\t\t\tby K. (https://github.com/wlzla000)\n\t\t\ton December 27-29, 2017,\n\n\t\tlicensed under\n\n\n\t\tthe MIT license\n\n\t\tCopyright (c) 2017 K.\n\n\t\t Permission is hereby granted, free of charge, to any person\n\t\tobtaining a copy of this software and associated documentation\n\t\tfiles (the \"Software\"), to deal in the Software without\n\t\trestriction, including without limitation the rights to use,\n\t\tcopy, modify, merge, publish, distribute, sublicense, and/or\n\t\tsell copies of the Software, and to permit persons to whom the\n\t\tSoftware is furnished to do so, subject to the following\n\t\tconditions:\n\n\t\t The above copyright notice and this permission notice shall be\n\t\tincluded in all copies or substantial portions of the Software.\n\n\t\t THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t\tEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\t\tOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t\tNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\t\tHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\t\tWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\t\tFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\t\tOTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\"use strict\";\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar RIPEMD160 = function () {\n\tfunction RIPEMD160() {\n\t\t// https://webcache.googleusercontent.com/search?q=cache:CnLOgolTHYEJ:https://www.cosic.esat.kuleuven.be/publications/article-317.pdf\n\t\t// http://shodhganga.inflibnet.ac.in/bitstream/10603/22978/13/13_appendix.pdf\n\n\t\t_classCallCheck(this, RIPEMD160);\n\t}\n\n\t_createClass(RIPEMD160, null, [{\n\t\tkey: \"get_n_pad_bytes\",\n\t\tvalue: function get_n_pad_bytes(message_size /* in bytes, 1 byte is 8 bits. */) {\n\t\t\t//  Obtain the number of bytes needed to pad the message.\n\t\t\t// It does not contain the size of the message size information.\n\t\t\t/*\n   \thttps://webcache.googleusercontent.com/search?q=cache:CnLOgolTHYEJ:https://www.cosic.esat.kuleuven.be/publications/article-317.pdf\n   \t\tThe Cryptographic Hash Function RIPEMD-160\n   \t\twritten by\n   \t\tBart Preneel,\n   \t\tHans Dobbertin,\n   \t\tAntoon Bosselaers\n   \tin\n   \t\t1997.\n   \t\t--------------------------------------------------\n   \t\t§5     Description of RIPEMD-160\n   \t\t......\n   \t\t In order to guarantee that the total input size is a\n   \tmultiple of 512 bits, the input is padded in the same\n   \tway as for all the members of the MD4-family: one\n   \tappends a single 1 followed by a string of 0s (the\n   \tnumber of 0s lies between 0 and 511); the last 64 bits\n   \tof the extended input contain the binary representation\n   \tof the input size in bits, least significant byte first.\n   */\n\t\t\t/*\n   \thttps://tools.ietf.org/rfc/rfc1186.txt\n   \t\tRFC 1186: MD4 Message Digest Algorithm.\n   \t\twritten by\n   \t\tRonald Linn Rivest\n   \tin\n   \t\tOctober 1990.\n   \t\t--------------------------------------------------\n   \t\t§3     MD4 Algorithm Description\n   \t\t......\n   \t\tStep 1. Append padding bits\n   \t\t The message is \"padded\" (extended) so that its length\n   \t(in bits) is congruent to 448, modulo 512. That is, the\n   \tmessage is extended so that it is just 64 bits shy of\n   \tbeing a multiple of 512 bits long. Padding is always\n   \tperformed, even if the length of the message is already\n   \tcongruent to 448, modulo 512 (in which case 512 bits of\n   \tpadding are added).\n   \t\t Padding is performed as follows: a single \"1\" bit is\n   \tappended to the message, and then enough zero bits are\n   \tappended so that the length in bits of the padded\n   \tmessage becomes congruent to 448, modulo 512.\n   \t\tStep 2. Append length\n   \t\t A 64-bit representation of b (the length of the message\n   \tbefore the padding bits were added) is appended to the\n   \tresult of the previous step. In the unlikely event that\n   \tb is greater than 2^64, then only the low-order 64 bits\n   \tof b are used. (These bits are appended as two 32-bit\n   \twords and appended low-order word first in accordance\n   \twith the previous conventions.)\n   \t\t At this point the resulting message (after padding with\n   \tbits and with b) has a length that is an exact multiple\n   \tof 512 bits. Equivalently, this message has a length\n   \tthat is an exact multiple of 16 (32-bit) words. Let\n   \tM[0 ... N-1] denote the words of the resulting message,\n   \twhere N is a multiple of 16.\n   */\n\t\t\t// https://crypto.stackexchange.com/a/32407/54568\n\t\t\t/*\n   \tExample case  # 1\n   \t\t[0 bit: message.]\n   \t\t[1 bit: 1.]\n   \t\t[447 bits: 0.]\n   \t\t[64 bits: message size information.]\n   \t\tExample case  # 2\n   \t\t[512-bits: message]\n   \t\t[1 bit: 1.]\n   \t\t[447 bits: 0.]\n   \t\t[64 bits: message size information.]\n   \t\tExample case  # 3\n   \t\t[(512 - 64 = 448) bits: message.]\n   \t\t[1 bit: 1.]\n   \t\t[511 bits: 0.]\n   \t\t[64 bits: message size information.]\n   \t\tExample case  # 4\n   \t\t[(512 - 65 = 447) bits: message.]\n   \t\t[1 bit: 1.]\n   \t\t[0 bit: 0.]\n   \t\t[64 bits: message size information.]\n   */\n\t\t\t// The number of padding zero bits:\n\t\t\t//      511 - [{(message size in bits) + 64} (mod 512)]\n\t\t\treturn 64 - (message_size + 8 & 63 /* 63 */);\n\t\t}\n\t}, {\n\t\tkey: \"pad\",\n\t\tvalue: function pad(message /* An ArrayBuffer. */) {\n\t\t\tvar message_size = message.byteLength;\n\t\t\tvar n_pad = RIPEMD160.get_n_pad_bytes(message_size);\n\n\t\t\t//  `Number.MAX_SAFE_INTEGER` is ((2 ** 53) - 1) and\n\t\t\t// bitwise operation in Javascript is done on 32-bits operands.\n\t\t\tvar divmod = function divmod(dividend, divisor) {\n\t\t\t\treturn [Math.floor(dividend / divisor), dividend % divisor];\n\t\t\t};\n\t\t\t/*\n   To shift\n     00000000 000????? ???????? ???????? ???????? ???????? ???????? ????????\n                                      t o\n    00000000 ???????? ???????? ???????? ???????? ???????? ???????? ?????000\n   --------------------------------------------------------------------------------\n   Method #1\n      00000000 000????? ???????? ????????  ???????? ???????? ???????? ????????\n    [00000000 000AAAAA AAAAAAAA AAAAAAAA] (<A> captured)\n    [00000000 AAAAAAAA AAAAAAAA AAAAA000] (<A> shifted)\n                          (<B> captured) [BBBBBBBB BBBBBBBB BBBBBBBB BBBBBBBB]\n                      (<B> shifted) [BBB][BBBBBBBB BBBBBBBB BBBBBBBB BBBBB000]\n    [00000000 AAAAAAAA AAAAAAAA AAAAABBB] (<A> & <B_2> merged)\n    [00000000 AAAAAAAA AAAAAAAA AAAAABBB][BBBBBBBB BBBBBBBB BBBBBBBB BBBBB000]\n     00000000 ???????? ???????? ????????  ???????? ???????? ???????? ?????000\n   \tconst uint32_max_plus_1 = 0x100000000; // (2 ** 32)\n   const [\n   \tmsg_byte_size_most, // Value range [0, (2 ** 21) - 1].\n   \tmsg_byte_size_least // Value range [0, (2 ** 32) - 1].\n   ] = divmod(message_size, uint32_max_plus_1);\n   const [\n   \tcarry, // Value range [0, 7].\n   \tmsg_bit_size_least // Value range [0, (2 ** 32) - 8].\n   ] = divmod(message_byte_size_least * 8, uint32_max_plus_1);\n   const message_bit_size_most = message_byte_size_most * 8\n   \t+ carry; // Value range [0, (2 ** 24) - 1].\n   --------------------------------------------------------------------------------\n   Method #2\n     00000000 000????? ???????? ????????  ???????? ???????? ???????? ????????\n       [00000 000AAAAA AAAAAAAA AAAAAAAA  AAA] (<A> captured)\n                          (<B> captured) [000BBBBB BBBBBBBB BBBBBBBB BBBBBBBB]\n                           (<B> shifted) [BBBBBBBB BBBBBBBB BBBBBBBB BBBBB000]\n    [00000000 AAAAAAAA AAAAAAAA AAAAAAAA][BBBBBBBB BBBBBBBB BBBBBBBB BBBBB000]\n     00000000 ???????? ???????? ????????  ???????? ???????? ???????? ?????000\n   \t*/\n\n\t\t\tvar _divmod$map = divmod(message_size, 536870912 /* (2 ** 29) */).map(function (x, index) {\n\t\t\t\treturn index ? x * 8 : x;\n\t\t\t}),\n\t\t\t    _divmod$map2 = _slicedToArray(_divmod$map, 2),\n\t\t\t    msg_bit_size_most = _divmod$map2[0],\n\t\t\t    msg_bit_size_least = _divmod$map2[1];\n\n\t\t\t// `ArrayBuffer.transfer()` is not supported.\n\n\n\t\t\tvar padded = new Uint8Array(message_size + n_pad + 8);\n\t\t\tpadded.set(new Uint8Array(message), 0);\n\t\t\tvar data_view = new DataView(padded.buffer);\n\t\t\tdata_view.setUint8(message_size, 128);\n\t\t\tdata_view.setUint32(message_size + n_pad, msg_bit_size_least, true // Little-endian\n\t\t\t);\n\t\t\tdata_view.setUint32(message_size + n_pad + 4, msg_bit_size_most, true // Little-endian\n\t\t\t);\n\n\t\t\treturn padded.buffer;\n\t\t}\n\t}, {\n\t\tkey: \"f\",\n\t\tvalue: function f(j, x, y, z) {\n\t\t\tif (0 <= j && j <= 15) {\n\t\t\t\t// Exclusive-OR\n\t\t\t\treturn x ^ y ^ z;\n\t\t\t}\n\t\t\tif (16 <= j && j <= 31) {\n\t\t\t\t// Multiplexing (muxing)\n\t\t\t\treturn x & y | ~x & z;\n\t\t\t}\n\t\t\tif (32 <= j && j <= 47) {\n\t\t\t\treturn (x | ~y) ^ z;\n\t\t\t}\n\t\t\tif (48 <= j && j <= 63) {\n\t\t\t\t// Multiplexing (muxing)\n\t\t\t\treturn x & z | y & ~z;\n\t\t\t}\n\t\t\tif (64 <= j && j <= 79) {\n\t\t\t\treturn x ^ (y | ~z);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"K\",\n\t\tvalue: function K(j) {\n\t\t\tif (0 <= j && j <= 15) {\n\t\t\t\treturn 0x00000000;\n\t\t\t}\n\t\t\tif (16 <= j && j <= 31) {\n\t\t\t\t// Math.floor((2 ** 30) * Math.SQRT2)\n\t\t\t\treturn 0x5A827999;\n\t\t\t}\n\t\t\tif (32 <= j && j <= 47) {\n\t\t\t\t// Math.floor((2 ** 30) * Math.sqrt(3))\n\t\t\t\treturn 0x6ED9EBA1;\n\t\t\t}\n\t\t\tif (48 <= j && j <= 63) {\n\t\t\t\t// Math.floor((2 ** 30) * Math.sqrt(5))\n\t\t\t\treturn 0x8F1BBCDC;\n\t\t\t}\n\t\t\tif (64 <= j && j <= 79) {\n\t\t\t\t// Math.floor((2 ** 30) * Math.sqrt(7))\n\t\t\t\treturn 0xA953FD4E;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"KP\",\n\t\tvalue: function KP(j) // K'\n\t\t{\n\t\t\tif (0 <= j && j <= 15) {\n\t\t\t\t// Math.floor((2 ** 30) * Math.cbrt(2))\n\t\t\t\treturn 0x50A28BE6;\n\t\t\t}\n\t\t\tif (16 <= j && j <= 31) {\n\t\t\t\t// Math.floor((2 ** 30) * Math.cbrt(3))\n\t\t\t\treturn 0x5C4DD124;\n\t\t\t}\n\t\t\tif (32 <= j && j <= 47) {\n\t\t\t\t// Math.floor((2 ** 30) * Math.cbrt(5))\n\t\t\t\treturn 0x6D703EF3;\n\t\t\t}\n\t\t\tif (48 <= j && j <= 63) {\n\t\t\t\t// Math.floor((2 ** 30) * Math.cbrt(7))\n\t\t\t\treturn 0x7A6D76E9;\n\t\t\t}\n\t\t\tif (64 <= j && j <= 79) {\n\t\t\t\treturn 0x00000000;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"add_modulo32\",\n\t\tvalue: function add_modulo32() /* ...... */{\n\t\t\t// 1.  Modulo addition (addition modulo) is associative.\n\t\t\t//    https://proofwiki.org/wiki/Modulo_Addition_is_Associative\n\t\t\t// 2.  Bitwise operation in Javascript\n\t\t\t//    is done on 32-bits operands\n\t\t\t//    and results in a 32-bits value.\n\t\t\treturn Array.from(arguments).reduce(function (a, b) {\n\t\t\t\treturn a + b;\n\t\t\t}, 0) | 0;\n\t\t}\n\t}, {\n\t\tkey: \"rol32\",\n\t\tvalue: function rol32(value, count) {\n\t\t\t// Cyclic left shift (rotate) on 32-bits value.\n\t\t\treturn value << count | value >>> 32 - count;\n\t\t}\n\t}, {\n\t\tkey: \"hash\",\n\t\tvalue: function hash(message /* An ArrayBuffer. */) {\n\t\t\t//////////       Padding       //////////\n\n\t\t\t// The padded message.\n\t\t\tvar padded = RIPEMD160.pad(message);\n\n\t\t\t//////////     Compression     //////////\n\n\t\t\t// Message word selectors.\n\t\t\tvar r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\n\t\t\tvar rP = [// r'\n\t\t\t5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\n\n\t\t\t// Amounts for 'rotate left' operation.\n\t\t\tvar s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\n\t\t\tvar sP = [// s'\n\t\t\t8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\n\n\t\t\t// The size, in bytes, of a word.\n\t\t\tvar word_size = 4;\n\n\t\t\t// The size, in bytes, of a 16-words block.\n\t\t\tvar block_size = 64;\n\n\t\t\t// The number of the 16-words blocks.\n\t\t\tvar t = padded.byteLength / block_size;\n\n\t\t\t//  The message after padding consists of t 16-word blocks that\n\t\t\t// are denoted with X_i[j], with 0≤i≤(t − 1) and 0≤j≤15.\n\t\t\tvar X = new Array(t).fill(undefined).map(function (_, i) {\n\t\t\t\treturn function (j) {\n\t\t\t\t\treturn new DataView(padded, i * block_size, block_size).getUint32(j * word_size, true // Little-endian\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t//  The result of RIPEMD-160 is contained in five 32-bit words,\n\t\t\t// which form the internal state of the algorithm. The final\n\t\t\t// content of these five 32-bit words is converted to a 160-bit\n\t\t\t// string, again using the little-endian convention.\n\t\t\tvar h = [0x67452301, // h_0\n\t\t\t0xEFCDAB89, // h_1\n\t\t\t0x98BADCFE, // h_2\n\t\t\t0x10325476, // h_3\n\t\t\t0xC3D2E1F0 // h_4\n\t\t\t];\n\n\t\t\tfor (var i = 0; i < t; ++i) {\n\t\t\t\tvar A = h[0],\n\t\t\t\t    B = h[1],\n\t\t\t\t    C = h[2],\n\t\t\t\t    D = h[3],\n\t\t\t\t    E = h[4];\n\t\t\t\tvar AP = A,\n\t\t\t\t    BP = B,\n\t\t\t\t    CP = C,\n\t\t\t\t    DP = D,\n\t\t\t\t    EP = E;\n\t\t\t\tfor (var j = 0; j < 80; ++j) {\n\t\t\t\t\t// Left rounds\n\t\t\t\t\tvar _T = RIPEMD160.add_modulo32(RIPEMD160.rol32(RIPEMD160.add_modulo32(A, RIPEMD160.f(j, B, C, D), X[i](r[j]), RIPEMD160.K(j)), s[j]), E);\n\t\t\t\t\tA = E;\n\t\t\t\t\tE = D;\n\t\t\t\t\tD = RIPEMD160.rol32(C, 10);\n\t\t\t\t\tC = B;\n\t\t\t\t\tB = _T;\n\n\t\t\t\t\t// Right rounds\n\t\t\t\t\t_T = RIPEMD160.add_modulo32(RIPEMD160.rol32(RIPEMD160.add_modulo32(AP, RIPEMD160.f(79 - j, BP, CP, DP), X[i](rP[j]), RIPEMD160.KP(j)), sP[j]), EP);\n\t\t\t\t\tAP = EP;\n\t\t\t\t\tEP = DP;\n\t\t\t\t\tDP = RIPEMD160.rol32(CP, 10);\n\t\t\t\t\tCP = BP;\n\t\t\t\t\tBP = _T;\n\t\t\t\t}\n\t\t\t\tvar T = RIPEMD160.add_modulo32(h[1], C, DP);\n\t\t\t\th[1] = RIPEMD160.add_modulo32(h[2], D, EP);\n\t\t\t\th[2] = RIPEMD160.add_modulo32(h[3], E, AP);\n\t\t\t\th[3] = RIPEMD160.add_modulo32(h[4], A, BP);\n\t\t\t\th[4] = RIPEMD160.add_modulo32(h[0], B, CP);\n\t\t\t\th[0] = T;\n\t\t\t}\n\n\t\t\t//  The final output string then consists of the concatenatation\n\t\t\t// of h_0, h_1, h_2, h_3, and h_4 after converting each h_i to a\n\t\t\t// 4-byte string using the little-endian convention.\n\t\t\tvar result = new ArrayBuffer(20);\n\t\t\tvar data_view = new DataView(result);\n\t\t\th.forEach(function (h_i, i) {\n\t\t\t\treturn data_view.setUint32(i * 4, h_i, true);\n\t\t\t});\n\t\t\treturn result;\n\t\t}\n\t}]);\n\n\treturn RIPEMD160;\n}();\n\nmodule.exports = {\n\tRIPEMD160: RIPEMD160\n};\n"],"mappings":"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;AACA;AACA;;MACG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACG;;MACA;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACG;MACA;MACA,OAAO,MAAMA,YAAY,GAAG,CAAf,GAAmB;MAAG;MAA5B,CAAP;IACA;EAxF6B,CAAD,EAyF3B;IACFT,GAAG,EAAE,KADH;IAEFhB,KAAK,EAAE,SAAS0B,GAAT,CAAaC;IAAQ;IAArB,EAA4C;MAClD,IAAIF,YAAY,GAAGE,OAAO,CAACC,UAA3B;MACA,IAAIC,KAAK,GAAGN,SAAS,CAACC,eAAV,CAA0BC,YAA1B,CAAZ,CAFkD,CAIlD;MACA;;MACA,IAAIK,MAAM,GAAG,SAASA,MAAT,CAAgBC,QAAhB,EAA0BC,OAA1B,EAAmC;QAC/C,OAAO,CAACC,IAAI,CAACC,KAAL,CAAWH,QAAQ,GAAGC,OAAtB,CAAD,EAAiCD,QAAQ,GAAGC,OAA5C,CAAP;MACA,CAFD;MAGA;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;MAEG,IAAIG,WAAW,GAAGL,MAAM,CAACL,YAAD,EAAe;MAAU;MAAzB,CAAN,CAAgDW,GAAhD,CAAoD,UAAUC,CAAV,EAAaC,KAAb,EAAoB;QACzF,OAAOA,KAAK,GAAGD,CAAC,GAAG,CAAP,GAAWA,CAAvB;MACA,CAFiB,CAAlB;MAAA,IAGIE,YAAY,GAAGvD,cAAc,CAACmD,WAAD,EAAc,CAAd,CAHjC;MAAA,IAIIK,iBAAiB,GAAGD,YAAY,CAAC,CAAD,CAJp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"},"metadata":{},"sourceType":"script"}