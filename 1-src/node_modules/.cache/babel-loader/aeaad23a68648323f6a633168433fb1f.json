{"ast":null,"code":"\"use strict\";\n/**\n * @module API\n */\n// copyright defined in eosjs/LICENSE.txt\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ser = require(\"./eosjs-serialize\");\n\nvar abiAbi = require('../src/abi.abi.json');\n\nvar transactionAbi = require('../src/transaction.abi.json');\n\nvar Api =\n/** @class */\nfunction () {\n  /**\n   * @param args\n   *    * `rpc`: Issues RPC calls\n   *    * `authorityProvider`: Get public keys needed to meet authorities in a transaction\n   *    * `abiProvider`: Supplies ABIs in raw form (binary)\n   *    * `signatureProvider`: Signs transactions\n   *    * `chainId`: Identifies chain\n   *    * `textEncoder`: `TextEncoder` instance to use. Pass in `null` if running in a browser\n   *    * `textDecoder`: `TextDecoder` instance to use. Pass in `null` if running in a browser\n   */\n  function Api(args) {\n    /** Holds information needed to serialize contract actions */\n    this.contracts = new Map();\n    /** Fetched abis */\n\n    this.cachedAbis = new Map();\n    this.rpc = args.rpc;\n    this.authorityProvider = args.authorityProvider || args.rpc;\n    this.abiProvider = args.abiProvider || args.rpc;\n    this.signatureProvider = args.signatureProvider;\n    this.chainId = args.chainId;\n    this.textEncoder = args.textEncoder;\n    this.textDecoder = args.textDecoder;\n    this.abiTypes = ser.getTypesFromAbi(ser.createInitialTypes(), abiAbi);\n    this.transactionTypes = ser.getTypesFromAbi(ser.createInitialTypes(), transactionAbi);\n  }\n  /** Decodes an abi as Uint8Array into json. */\n\n\n  Api.prototype.rawAbiToJson = function (rawAbi) {\n    var buffer = new ser.SerialBuffer({\n      textEncoder: this.textEncoder,\n      textDecoder: this.textDecoder,\n      array: rawAbi\n    });\n\n    if (!ser.supportedAbiVersion(buffer.getString())) {\n      throw new Error('Unsupported abi version');\n    }\n\n    buffer.restartRead();\n    return this.abiTypes.get('abi_def').deserialize(buffer);\n  };\n  /** Get abi in both binary and structured forms. Fetch when needed. */\n\n\n  Api.prototype.getCachedAbi = function (accountName, reload) {\n    if (reload === void 0) {\n      reload = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAbi, rawAbi, abi, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!reload && this.cachedAbis.get(accountName)) {\n              return [2\n              /*return*/\n              , this.cachedAbis.get(accountName)];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.abiProvider.getRawAbi(accountName)];\n\n          case 2:\n            rawAbi = _a.sent().abi;\n            abi = this.rawAbiToJson(rawAbi);\n            cachedAbi = {\n              rawAbi: rawAbi,\n              abi: abi\n            };\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _a.sent();\n            e_1.message = \"fetching abi for \" + accountName + \": \" + e_1.message;\n            throw e_1;\n\n          case 4:\n            if (!cachedAbi) {\n              throw new Error(\"Missing abi for \" + accountName);\n            }\n\n            this.cachedAbis.set(accountName, cachedAbi);\n            return [2\n            /*return*/\n            , cachedAbi];\n        }\n      });\n    });\n  };\n  /** Get abi in structured form. Fetch when needed. */\n\n\n  Api.prototype.getAbi = function (accountName, reload) {\n    if (reload === void 0) {\n      reload = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getCachedAbi(accountName, reload)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent().abi];\n        }\n      });\n    });\n  };\n  /** Get abis needed by a transaction */\n\n\n  Api.prototype.getTransactionAbis = function (transaction, reload) {\n    if (reload === void 0) {\n      reload = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, uniqueAccounts, actionPromises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        accounts = transaction.actions.map(function (action) {\n          return action.account;\n        });\n        uniqueAccounts = new Set(accounts);\n        actionPromises = __spread(uniqueAccounts).map(function (account) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var _a;\n\n            return __generator(this, function (_b) {\n              switch (_b.label) {\n                case 0:\n                  _a = {\n                    accountName: account\n                  };\n                  return [4\n                  /*yield*/\n                  , this.getCachedAbi(account, reload)];\n\n                case 1:\n                  return [2\n                  /*return*/\n                  , (_a.abi = _b.sent().rawAbi, _a)];\n              }\n            });\n          });\n        });\n        return [2\n        /*return*/\n        , Promise.all(actionPromises)];\n      });\n    });\n  };\n  /** Get data needed to serialize actions in a contract */\n\n\n  Api.prototype.getContract = function (accountName, reload) {\n    if (reload === void 0) {\n      reload = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var e_2, _a, abi, types, actions, _b, _c, _d, name_1, type, result;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            if (!reload && this.contracts.get(accountName)) {\n              return [2\n              /*return*/\n              , this.contracts.get(accountName)];\n            }\n\n            return [4\n            /*yield*/\n            , this.getAbi(accountName, reload)];\n\n          case 1:\n            abi = _e.sent();\n            types = ser.getTypesFromAbi(ser.createInitialTypes(), abi);\n            actions = new Map();\n\n            try {\n              for (_b = __values(abi.actions), _c = _b.next(); !_c.done; _c = _b.next()) {\n                _d = _c.value, name_1 = _d.name, type = _d.type;\n                actions.set(name_1, ser.getType(types, type));\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n\n            result = {\n              types: types,\n              actions: actions\n            };\n            this.contracts.set(accountName, result);\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /** Convert `value` to binary form. `type` must be a built-in abi type or in `transaction.abi.json`. */\n\n\n  Api.prototype.serialize = function (buffer, type, value) {\n    this.transactionTypes.get(type).serialize(buffer, value);\n  };\n  /** Convert data in `buffer` to structured form. `type` must be a built-in abi type or in `transaction.abi.json`. */\n\n\n  Api.prototype.deserialize = function (buffer, type) {\n    return this.transactionTypes.get(type).deserialize(buffer);\n  };\n  /** Convert a transaction to binary */\n\n\n  Api.prototype.serializeTransaction = function (transaction) {\n    var buffer = new ser.SerialBuffer({\n      textEncoder: this.textEncoder,\n      textDecoder: this.textDecoder\n    });\n    this.serialize(buffer, 'transaction', __assign({\n      max_net_usage_words: 0,\n      max_cpu_usage_ms: 0,\n      delay_sec: 0,\n      context_free_actions: [],\n      actions: [],\n      transaction_extensions: []\n    }, transaction));\n    return buffer.asUint8Array();\n  };\n  /** Convert a transaction from binary. Leaves actions in hex. */\n\n\n  Api.prototype.deserializeTransaction = function (transaction) {\n    var buffer = new ser.SerialBuffer({\n      textEncoder: this.textEncoder,\n      textDecoder: this.textDecoder\n    });\n    buffer.pushArray(transaction);\n    return this.deserialize(buffer, 'transaction');\n  };\n  /** Convert actions to hex */\n\n\n  Api.prototype.serializeActions = function (actions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all(actions.map(function (_a) {\n              var account = _a.account,\n                  name = _a.name,\n                  authorization = _a.authorization,\n                  data = _a.data;\n              return __awaiter(_this, void 0, void 0, function () {\n                var contract;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this.getContract(account)];\n\n                    case 1:\n                      contract = _b.sent();\n                      return [2\n                      /*return*/\n                      , ser.serializeAction(contract, account, name, authorization, data, this.textEncoder, this.textDecoder)];\n                  }\n                });\n              });\n            }))];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /** Convert actions from hex */\n\n\n  Api.prototype.deserializeActions = function (actions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all(actions.map(function (_a) {\n              var account = _a.account,\n                  name = _a.name,\n                  authorization = _a.authorization,\n                  data = _a.data;\n              return __awaiter(_this, void 0, void 0, function () {\n                var contract;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this.getContract(account)];\n\n                    case 1:\n                      contract = _b.sent();\n                      return [2\n                      /*return*/\n                      , ser.deserializeAction(contract, account, name, authorization, data, this.textEncoder, this.textDecoder)];\n                  }\n                });\n              });\n            }))];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /** Convert a transaction from binary. Also deserializes actions. */\n\n\n  Api.prototype.deserializeTransactionWithActions = function (transaction) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deserializedTransaction, deserializedActions;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (typeof transaction === 'string') {\n              transaction = ser.hexToUint8Array(transaction);\n            }\n\n            deserializedTransaction = this.deserializeTransaction(transaction);\n            return [4\n            /*yield*/\n            , this.deserializeActions(deserializedTransaction.actions)];\n\n          case 1:\n            deserializedActions = _a.sent();\n            return [2\n            /*return*/\n            , __assign({}, deserializedTransaction, {\n              actions: deserializedActions\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Create and optionally broadcast a transaction.\n   *\n   * Named Parameters:\n   *    * `broadcast`: broadcast this transaction?\n   *    * `sign`: sign this transaction?\n   *    * If both `blocksBehind` and `expireSeconds` are present,\n   *      then fetch the block which is `blocksBehind` behind head block,\n   *      use it as a reference for TAPoS, and expire the transaction `expireSeconds` after that block's time.\n   * @returns node response if `broadcast`, `{signatures, serializedTransaction}` if `!broadcast`\n   */\n\n\n  Api.prototype.transact = function (transaction, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.broadcast,\n        broadcast = _c === void 0 ? true : _c,\n        _d = _b.sign,\n        sign = _d === void 0 ? true : _d,\n        blocksBehind = _b.blocksBehind,\n        expireSeconds = _b.expireSeconds;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var info, refBlock, abis, _e, _f, serializedTransaction, pushTransactionArgs, availableKeys, requiredKeys;\n\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            if (!!this.chainId) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.rpc.get_info()];\n\n          case 1:\n            info = _g.sent();\n            this.chainId = info.chain_id;\n            _g.label = 2;\n\n          case 2:\n            if (!(typeof blocksBehind === 'number' && expireSeconds)) return [3\n            /*break*/\n            , 6];\n            if (!!info) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.rpc.get_info()];\n\n          case 3:\n            info = _g.sent();\n            _g.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.rpc.get_block(info.head_block_num - blocksBehind)];\n\n          case 5:\n            refBlock = _g.sent();\n            transaction = __assign({}, ser.transactionHeader(refBlock, expireSeconds), transaction);\n            _g.label = 6;\n\n          case 6:\n            if (!this.hasRequiredTaposFields(transaction)) {\n              throw new Error('Required configuration or TAPOS fields are not present');\n            }\n\n            return [4\n            /*yield*/\n            , this.getTransactionAbis(transaction)];\n\n          case 7:\n            abis = _g.sent();\n            _e = [{}, transaction];\n            _f = {};\n            return [4\n            /*yield*/\n            , this.serializeActions(transaction.actions)];\n\n          case 8:\n            transaction = __assign.apply(void 0, _e.concat([(_f.actions = _g.sent(), _f)]));\n            serializedTransaction = this.serializeTransaction(transaction);\n            pushTransactionArgs = {\n              serializedTransaction: serializedTransaction,\n              signatures: []\n            };\n            if (!sign) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , this.signatureProvider.getAvailableKeys()];\n\n          case 9:\n            availableKeys = _g.sent();\n            return [4\n            /*yield*/\n            , this.authorityProvider.getRequiredKeys({\n              transaction: transaction,\n              availableKeys: availableKeys\n            })];\n\n          case 10:\n            requiredKeys = _g.sent();\n            return [4\n            /*yield*/\n            , this.signatureProvider.sign({\n              chainId: this.chainId,\n              requiredKeys: requiredKeys,\n              serializedTransaction: serializedTransaction,\n              abis: abis\n            })];\n\n          case 11:\n            pushTransactionArgs = _g.sent();\n            _g.label = 12;\n\n          case 12:\n            if (broadcast) {\n              return [2\n              /*return*/\n              , this.pushSignedTransaction(pushTransactionArgs)];\n            }\n\n            return [2\n            /*return*/\n            , pushTransactionArgs];\n        }\n      });\n    });\n  };\n  /** Broadcast a signed transaction */\n\n\n  Api.prototype.pushSignedTransaction = function (_a) {\n    var signatures = _a.signatures,\n        serializedTransaction = _a.serializedTransaction;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        return [2\n        /*return*/\n        , this.rpc.push_transaction({\n          signatures: signatures,\n          serializedTransaction: serializedTransaction\n        })];\n      });\n    });\n  }; // eventually break out into TransactionValidator class\n\n\n  Api.prototype.hasRequiredTaposFields = function (_a) {\n    var expiration = _a.expiration,\n        ref_block_num = _a.ref_block_num,\n        ref_block_prefix = _a.ref_block_prefix,\n        transaction = __rest(_a, [\"expiration\", \"ref_block_num\", \"ref_block_prefix\"]);\n\n    return !!(expiration && ref_block_num && ref_block_prefix);\n  };\n\n  return Api;\n}(); // Api\n\n\nexports.Api = Api;","map":{"version":3,"mappings":"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","names":["abiAbi","require","transactionAbi","args","Map","rpc","authorityProvider","abiProvider","signatureProvider","chainId","textEncoder","textDecoder","abiTypes","ser","getTypesFromAbi","createInitialTypes","transactionTypes","Api","rawAbi","buffer","SerialBuffer","array","supportedAbiVersion","getString","Error","restartRead","get","deserialize","accountName","reload","cachedAbis","getRawAbi","_a","abi","rawAbiToJson","cachedAbi","e_1","message","set","getCachedAbi","transaction","accounts","actions","map","action","account","uniqueAccounts","Set","actionPromises","__spread","_b","Promise","all","contracts","getAbi","_e","types","_c","_d","name_1","type","getType","result","value","serialize","__assign","max_net_usage_words","max_cpu_usage_ms","delay_sec","context_free_actions","transaction_extensions","asUint8Array","pushArray","name","authorization","data","getContract","contract","serializeAction","deserializeAction","hexToUint8Array","deserializedTransaction","deserializeTransaction","deserializeActions","deserializedActions","broadcast","sign","blocksBehind","expireSeconds","get_info","info","_g","chain_id","get_block","head_block_num","refBlock","transactionHeader","hasRequiredTaposFields","getTransactionAbis","abis","serializeActions","_f","serializedTransaction","serializeTransaction","pushTransactionArgs","signatures","getAvailableKeys","availableKeys","getRequiredKeys","requiredKeys","pushSignedTransaction","push_transaction","ref_block_num","ref_block_prefix","expiration","exports"],"sources":["../src/eosjs-api.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}