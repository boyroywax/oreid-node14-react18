{"ast":null,"code":"import { utf8EncodeJs, utf8Count, TEXT_ENCODER_THRESHOLD, utf8EncodeTE } from \"./utils/utf8.mjs\";\nimport { ExtensionCodec } from \"./ExtensionCodec.mjs\";\nimport { setInt64, setUint64 } from \"./utils/int.mjs\";\nimport { ensureUint8Array } from \"./utils/typedArrays.mjs\";\nexport var DEFAULT_MAX_DEPTH = 100;\nexport var DEFAULT_INITIAL_BUFFER_SIZE = 2048;\n\nvar Encoder =\n/** @class */\nfunction () {\n  function Encoder(extensionCodec, context, maxDepth, initialBufferSize, sortKeys, forceFloat32, ignoreUndefined, forceIntegerToFloat) {\n    if (extensionCodec === void 0) {\n      extensionCodec = ExtensionCodec.defaultCodec;\n    }\n\n    if (context === void 0) {\n      context = undefined;\n    }\n\n    if (maxDepth === void 0) {\n      maxDepth = DEFAULT_MAX_DEPTH;\n    }\n\n    if (initialBufferSize === void 0) {\n      initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE;\n    }\n\n    if (sortKeys === void 0) {\n      sortKeys = false;\n    }\n\n    if (forceFloat32 === void 0) {\n      forceFloat32 = false;\n    }\n\n    if (ignoreUndefined === void 0) {\n      ignoreUndefined = false;\n    }\n\n    if (forceIntegerToFloat === void 0) {\n      forceIntegerToFloat = false;\n    }\n\n    this.extensionCodec = extensionCodec;\n    this.context = context;\n    this.maxDepth = maxDepth;\n    this.initialBufferSize = initialBufferSize;\n    this.sortKeys = sortKeys;\n    this.forceFloat32 = forceFloat32;\n    this.ignoreUndefined = ignoreUndefined;\n    this.forceIntegerToFloat = forceIntegerToFloat;\n    this.pos = 0;\n    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));\n    this.bytes = new Uint8Array(this.view.buffer);\n  }\n\n  Encoder.prototype.getUint8Array = function () {\n    return this.bytes.subarray(0, this.pos);\n  };\n\n  Encoder.prototype.reinitializeState = function () {\n    this.pos = 0;\n  };\n\n  Encoder.prototype.encode = function (object) {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.getUint8Array();\n  };\n\n  Encoder.prototype.doEncode = function (object, depth) {\n    if (depth > this.maxDepth) {\n      throw new Error(\"Too deep objects in depth \".concat(depth));\n    }\n\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      this.encodeNumber(object);\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  };\n\n  Encoder.prototype.ensureBufferSizeToWrite = function (sizeToWrite) {\n    var requiredSize = this.pos + sizeToWrite;\n\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  };\n\n  Encoder.prototype.resizeBuffer = function (newSize) {\n    var newBuffer = new ArrayBuffer(newSize);\n    var newBytes = new Uint8Array(newBuffer);\n    var newView = new DataView(newBuffer);\n    newBytes.set(this.bytes);\n    this.view = newView;\n    this.bytes = newBytes;\n  };\n\n  Encoder.prototype.encodeNil = function () {\n    this.writeU8(0xc0);\n  };\n\n  Encoder.prototype.encodeBoolean = function (object) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  };\n\n  Encoder.prototype.encodeNumber = function (object) {\n    if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // negative fixint\n          this.writeU8(0xe0 | object + 0x20);\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        }\n      }\n    } else {\n      // non-integer numbers\n      if (this.forceFloat32) {\n        // float 32\n        this.writeU8(0xca);\n        this.writeF32(object);\n      } else {\n        // float 64\n        this.writeU8(0xcb);\n        this.writeF64(object);\n      }\n    }\n  };\n\n  Encoder.prototype.writeStringHeader = function (byteLength) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(\"Too long string: \".concat(byteLength, \" bytes in UTF-8\"));\n    }\n  };\n\n  Encoder.prototype.encodeString = function (object) {\n    var maxHeaderSize = 1 + 4;\n    var strLength = object.length;\n\n    if (strLength > TEXT_ENCODER_THRESHOLD) {\n      var byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeTE(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    } else {\n      var byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeJs(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    }\n  };\n\n  Encoder.prototype.encodeObject = function (object, depth) {\n    // try to encode objects with custom codec first of non-primitives\n    var ext = this.extensionCodec.tryToEncode(object, this.context);\n\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (typeof object === \"object\") {\n      this.encodeMap(object, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(\"Unrecognized object: \".concat(Object.prototype.toString.apply(object)));\n    }\n  };\n\n  Encoder.prototype.encodeBinary = function (object) {\n    var size = object.byteLength;\n\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(\"Too large binary: \".concat(size));\n    }\n\n    var bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  };\n\n  Encoder.prototype.encodeArray = function (object, depth) {\n    var size = object.length;\n\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(\"Too large array: \".concat(size));\n    }\n\n    for (var _i = 0, object_1 = object; _i < object_1.length; _i++) {\n      var item = object_1[_i];\n      this.doEncode(item, depth + 1);\n    }\n  };\n\n  Encoder.prototype.countWithoutUndefined = function (object, keys) {\n    var count = 0;\n\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n\n      if (object[key] !== undefined) {\n        count++;\n      }\n    }\n\n    return count;\n  };\n\n  Encoder.prototype.encodeMap = function (object, depth) {\n    var keys = Object.keys(object);\n\n    if (this.sortKeys) {\n      keys.sort();\n    }\n\n    var size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(\"Too large map object: \".concat(size));\n    }\n\n    for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n      var key = keys_2[_i];\n      var value = object[key];\n\n      if (!(this.ignoreUndefined && value === undefined)) {\n        this.encodeString(key);\n        this.doEncode(value, depth + 1);\n      }\n    }\n  };\n\n  Encoder.prototype.encodeExtension = function (ext) {\n    var size = ext.data.length;\n\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(\"Too large extension object: \".concat(size));\n    }\n\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  };\n\n  Encoder.prototype.writeU8 = function (value) {\n    this.ensureBufferSizeToWrite(1);\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  };\n\n  Encoder.prototype.writeU8a = function (values) {\n    var size = values.length;\n    this.ensureBufferSizeToWrite(size);\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  };\n\n  Encoder.prototype.writeI8 = function (value) {\n    this.ensureBufferSizeToWrite(1);\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  };\n\n  Encoder.prototype.writeU16 = function (value) {\n    this.ensureBufferSizeToWrite(2);\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  };\n\n  Encoder.prototype.writeI16 = function (value) {\n    this.ensureBufferSizeToWrite(2);\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  };\n\n  Encoder.prototype.writeU32 = function (value) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  };\n\n  Encoder.prototype.writeI32 = function (value) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  };\n\n  Encoder.prototype.writeF32 = function (value) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  };\n\n  Encoder.prototype.writeF64 = function (value) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  };\n\n  Encoder.prototype.writeU64 = function (value) {\n    this.ensureBufferSizeToWrite(8);\n    setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  };\n\n  Encoder.prototype.writeI64 = function (value) {\n    this.ensureBufferSizeToWrite(8);\n    setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  };\n\n  return Encoder;\n}();\n\nexport { Encoder };","map":{"version":3,"mappings":"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","names":["utf8EncodeJs","utf8Count","TEXT_ENCODER_THRESHOLD","utf8EncodeTE","ExtensionCodec","setInt64","setUint64","ensureUint8Array","DEFAULT_MAX_DEPTH","DEFAULT_INITIAL_BUFFER_SIZE","extensionCodec","context","maxDepth","initialBufferSize","sortKeys","forceFloat32","ignoreUndefined","forceIntegerToFloat","defaultCodec","undefined","DataView","ArrayBuffer","Uint8Array","view","buffer","Encoder","bytes","subarray","pos","object","reinitializeState","doEncode","getUint8Array","depth","Error","encodeNil","encodeBoolean","encodeNumber","encodeString","encodeObject","sizeToWrite","requiredSize","byteLength","resizeBuffer","newSize","newBuffer","newBytes","newView","set","writeU8","Number","isSafeInteger","writeU16","writeU32","writeU64","writeI8","writeI16","writeI32","writeI64","writeF32","writeF64","maxHeaderSize","strLength","length","ensureBufferSizeToWrite","writeStringHeader","ext","tryToEncode","encodeExtension","Array","isArray","encodeArray","isView","encodeBinary","encodeMap","Object","prototype","toString","apply","size","writeU8a","_i","item","keys","count","key","sort","countWithoutUndefined","value","data","type","setUint8","values","setInt8","setUint16","setInt16","setUint32","setInt32","setFloat32","setFloat64"],"sources":["/Users/j/Code/ore-test-barebones-node-v14/create-react-app/react-app-test/node_modules/@msgpack/msgpack/src/Encoder.ts"],"sourcesContent":["import { utf8EncodeJs, utf8Count, TEXT_ENCODER_THRESHOLD, utf8EncodeTE } from \"./utils/utf8\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { setInt64, setUint64 } from \"./utils/int\";\nimport { ensureUint8Array } from \"./utils/typedArrays\";\nimport type { ExtData } from \"./ExtData\";\n\nexport const DEFAULT_MAX_DEPTH = 100;\nexport const DEFAULT_INITIAL_BUFFER_SIZE = 2048;\n\nexport class Encoder<ContextType = undefined> {\n  private pos = 0;\n  private view = new DataView(new ArrayBuffer(this.initialBufferSize));\n  private bytes = new Uint8Array(this.view.buffer);\n\n  public constructor(\n    private readonly extensionCodec: ExtensionCodecType<ContextType> = ExtensionCodec.defaultCodec as any,\n    private readonly context: ContextType = undefined as any,\n    private readonly maxDepth = DEFAULT_MAX_DEPTH,\n    private readonly initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE,\n    private readonly sortKeys = false,\n    private readonly forceFloat32 = false,\n    private readonly ignoreUndefined = false,\n    private readonly forceIntegerToFloat = false,\n  ) {}\n\n  private getUint8Array(): Uint8Array {\n    return this.bytes.subarray(0, this.pos);\n  }\n\n  private reinitializeState() {\n    this.pos = 0;\n  }\n\n  public encode(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.getUint8Array();\n  }\n\n  private doEncode(object: unknown, depth: number): void {\n    if (depth > this.maxDepth) {\n      throw new Error(`Too deep objects in depth ${depth}`);\n    }\n\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      this.encodeNumber(object);\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  }\n\n  private ensureBufferSizeToWrite(sizeToWrite: number) {\n    const requiredSize = this.pos + sizeToWrite;\n\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  }\n\n  private resizeBuffer(newSize: number) {\n    const newBuffer = new ArrayBuffer(newSize);\n    const newBytes = new Uint8Array(newBuffer);\n    const newView = new DataView(newBuffer);\n\n    newBytes.set(this.bytes);\n\n    this.view = newView;\n    this.bytes = newBytes;\n  }\n\n  private encodeNil() {\n    this.writeU8(0xc0);\n  }\n\n  private encodeBoolean(object: boolean) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  }\n  private encodeNumber(object: number) {\n    if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // negative fixint\n          this.writeU8(0xe0 | (object + 0x20));\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        }\n      }\n    } else {\n      // non-integer numbers\n      if (this.forceFloat32) {\n        // float 32\n        this.writeU8(0xca);\n        this.writeF32(object);\n      } else {\n        // float 64\n        this.writeU8(0xcb);\n        this.writeF64(object);\n      }\n    }\n  }\n\n  private writeStringHeader(byteLength: number) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\n    }\n  }\n\n  private encodeString(object: string) {\n    const maxHeaderSize = 1 + 4;\n    const strLength = object.length;\n\n    if (strLength > TEXT_ENCODER_THRESHOLD) {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeTE(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    } else {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeJs(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    }\n  }\n\n  private encodeObject(object: unknown, depth: number) {\n    // try to encode objects with custom codec first of non-primitives\n    const ext = this.extensionCodec.tryToEncode(object, this.context);\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (typeof object === \"object\") {\n      this.encodeMap(object as Record<string, unknown>, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\n    }\n  }\n\n  private encodeBinary(object: ArrayBufferView) {\n    const size = object.byteLength;\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large binary: ${size}`);\n    }\n    const bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  }\n\n  private encodeArray(object: Array<unknown>, depth: number) {\n    const size = object.length;\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large array: ${size}`);\n    }\n    for (const item of object) {\n      this.doEncode(item, depth + 1);\n    }\n  }\n\n  private countWithoutUndefined(object: Record<string, unknown>, keys: ReadonlyArray<string>): number {\n    let count = 0;\n\n    for (const key of keys) {\n      if (object[key] !== undefined) {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  private encodeMap(object: Record<string, unknown>, depth: number) {\n    const keys = Object.keys(object);\n    if (this.sortKeys) {\n      keys.sort();\n    }\n\n    const size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large map object: ${size}`);\n    }\n\n    for (const key of keys) {\n      const value = object[key];\n\n      if (!(this.ignoreUndefined && value === undefined)) {\n        this.encodeString(key);\n        this.doEncode(value, depth + 1);\n      }\n    }\n  }\n\n  private encodeExtension(ext: ExtData) {\n    const size = ext.data.length;\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large extension object: ${size}`);\n    }\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  }\n\n  private writeU8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU8a(values: ArrayLike<number>) {\n    const size = values.length;\n    this.ensureBufferSizeToWrite(size);\n\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  }\n\n  private writeI8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeI16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeU32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeI32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeU64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeI64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}