{"ast":null,"code":"// Integer Utility\nexport var UINT32_MAX = 4294967295; // DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\n\nexport function setUint64(view, offset, value) {\n  var high = value / 4294967296;\n  var low = value; // high bits are truncated by DataView\n\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\nexport function setInt64(view, offset, value) {\n  var high = Math.floor(value / 4294967296);\n  var low = value; // high bits are truncated by DataView\n\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\nexport function getInt64(view, offset) {\n  var high = view.getInt32(offset);\n  var low = view.getUint32(offset + 4);\n  return high * 4294967296 + low;\n}\nexport function getUint64(view, offset) {\n  var high = view.getUint32(offset);\n  var low = view.getUint32(offset + 4);\n  return high * 4294967296 + low;\n}","map":{"version":3,"mappings":"AAAA;AAEA,OAAO,IAAMA,UAAU,GAAG,UAAnB,C,CAEP;AACA;;AAEA,OAAM,SAAUC,SAAV,CAAoBC,IAApB,EAAoCC,MAApC,EAAoDC,KAApD,EAAiE;EACrE,IAAMC,IAAI,GAAGD,KAAK,GAAG,UAArB;EACA,IAAME,GAAG,GAAGF,KAAZ,CAFqE,CAElD;;EACnBF,IAAI,CAACK,SAAL,CAAeJ,MAAf,EAAuBE,IAAvB;EACAH,IAAI,CAACK,SAAL,CAAeJ,MAAM,GAAG,CAAxB,EAA2BG,GAA3B;AACD;AAED,OAAM,SAAUE,QAAV,CAAmBN,IAAnB,EAAmCC,MAAnC,EAAmDC,KAAnD,EAAgE;EACpE,IAAMC,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWN,KAAK,GAAG,UAAnB,CAAb;EACA,IAAME,GAAG,GAAGF,KAAZ,CAFoE,CAEjD;;EACnBF,IAAI,CAACK,SAAL,CAAeJ,MAAf,EAAuBE,IAAvB;EACAH,IAAI,CAACK,SAAL,CAAeJ,MAAM,GAAG,CAAxB,EAA2BG,GAA3B;AACD;AAED,OAAM,SAAUK,QAAV,CAAmBT,IAAnB,EAAmCC,MAAnC,EAAiD;EACrD,IAAME,IAAI,GAAGH,IAAI,CAACU,QAAL,CAAcT,MAAd,CAAb;EACA,IAAMG,GAAG,GAAGJ,IAAI,CAACW,SAAL,CAAeV,MAAM,GAAG,CAAxB,CAAZ;EACA,OAAOE,IAAI,GAAG,UAAP,GAAuBC,GAA9B;AACD;AAED,OAAM,SAAUQ,SAAV,CAAoBZ,IAApB,EAAoCC,MAApC,EAAkD;EACtD,IAAME,IAAI,GAAGH,IAAI,CAACW,SAAL,CAAeV,MAAf,CAAb;EACA,IAAMG,GAAG,GAAGJ,IAAI,CAACW,SAAL,CAAeV,MAAM,GAAG,CAAxB,CAAZ;EACA,OAAOE,IAAI,GAAG,UAAP,GAAuBC,GAA9B;AACD","names":["UINT32_MAX","setUint64","view","offset","value","high","low","setUint32","setInt64","Math","floor","getInt64","getInt32","getUint32","getUint64"],"sources":["/Users/j/Code/ore-test-barebones-node-v14/create-react-app/react-app-test/node_modules/@msgpack/msgpack/src/utils/int.ts"],"sourcesContent":["// Integer Utility\n\nexport const UINT32_MAX = 0xffff_ffff;\n\n// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\n\nexport function setUint64(view: DataView, offset: number, value: number): void {\n  const high = value / 0x1_0000_0000;\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function setInt64(view: DataView, offset: number, value: number): void {\n  const high = Math.floor(value / 0x1_0000_0000);\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function getInt64(view: DataView, offset: number): number {\n  const high = view.getInt32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n\nexport function getUint64(view: DataView, offset: number): number {\n  const high = view.getUint32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n"]},"metadata":{},"sourceType":"module"}