{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { Decoder } from \"./Decoder.mjs\";\nimport { ensureAsyncIterable } from \"./utils/stream.mjs\";\nimport { defaultDecodeOptions } from \"./decode.mjs\";\nexport function decodeAsync(streamLike, options) {\n  if (options === void 0) {\n    options = defaultDecodeOptions;\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var stream, decoder;\n    return __generator(this, function (_a) {\n      stream = ensureAsyncIterable(streamLike);\n      decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n      return [2\n      /*return*/\n      , decoder.decodeAsync(stream)];\n    });\n  });\n}\nexport function decodeArrayStream(streamLike, options) {\n  if (options === void 0) {\n    options = defaultDecodeOptions;\n  }\n\n  var stream = ensureAsyncIterable(streamLike);\n  var decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n  return decoder.decodeArrayStream(stream);\n}\nexport function decodeMultiStream(streamLike, options) {\n  if (options === void 0) {\n    options = defaultDecodeOptions;\n  }\n\n  var stream = ensureAsyncIterable(streamLike);\n  var decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n  return decoder.decodeStream(stream);\n}\n/**\n * @deprecated Use {@link decodeMultiStream()} instead.\n */\n\nexport function decodeStream(streamLike, options) {\n  if (options === void 0) {\n    options = defaultDecodeOptions;\n  }\n\n  return decodeMultiStream(streamLike, options);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,oBAAT,QAAqC,cAArC;AAKA,OAAM,SAAgBC,WAAhB,CACJC,UADI,EAEJC,OAFI,EAE6E;EAAjF;IAAAA,UAAsDH,oBAAtD;EAAiF;;;;;MAE3EI,MAAM,GAAGL,mBAAmB,CAACG,UAAD,CAA5B;MAEAG,OAAO,GAAG,IAAIP,OAAJ,CACdK,OAAO,CAACG,cADM,EAEbH,OAA6C,CAACI,OAFjC,EAGdJ,OAAO,CAACK,YAHM,EAIdL,OAAO,CAACM,YAJM,EAKdN,OAAO,CAACO,cALM,EAMdP,OAAO,CAACQ,YANM,EAOdR,OAAO,CAACS,YAPM,CAAV;MASN;MAAA;MAAA,EAAOP,OAAO,CAACJ,WAAR,CAAoBG,MAApB,CAAP;;;AACD;AAED,OAAM,SAAUS,iBAAV,CACJX,UADI,EAEJC,OAFI,EAE6E;EAAjF;IAAAA,UAAsDH,oBAAtD;EAAiF;;EAEjF,IAAMI,MAAM,GAAGL,mBAAmB,CAACG,UAAD,CAAlC;EAEA,IAAMG,OAAO,GAAG,IAAIP,OAAJ,CACdK,OAAO,CAACG,cADM,EAEbH,OAA6C,CAACI,OAFjC,EAGdJ,OAAO,CAACK,YAHM,EAIdL,OAAO,CAACM,YAJM,EAKdN,OAAO,CAACO,cALM,EAMdP,OAAO,CAACQ,YANM,EAOdR,OAAO,CAACS,YAPM,CAAhB;EAUA,OAAOP,OAAO,CAACQ,iBAAR,CAA0BT,MAA1B,CAAP;AACD;AAED,OAAM,SAAUU,iBAAV,CACJZ,UADI,EAEJC,OAFI,EAE6E;EAAjF;IAAAA,UAAsDH,oBAAtD;EAAiF;;EAEjF,IAAMI,MAAM,GAAGL,mBAAmB,CAACG,UAAD,CAAlC;EAEA,IAAMG,OAAO,GAAG,IAAIP,OAAJ,CACdK,OAAO,CAACG,cADM,EAEbH,OAA6C,CAACI,OAFjC,EAGdJ,OAAO,CAACK,YAHM,EAIdL,OAAO,CAACM,YAJM,EAKdN,OAAO,CAACO,cALM,EAMdP,OAAO,CAACQ,YANM,EAOdR,OAAO,CAACS,YAPM,CAAhB;EAUA,OAAOP,OAAO,CAACU,YAAR,CAAqBX,MAArB,CAAP;AACD;AAED;;;;AAGA,OAAM,SAAUW,YAAV,CACJb,UADI,EAEJC,OAFI,EAE6E;EAAjF;IAAAA,UAAsDH,oBAAtD;EAAiF;;EAEjF,OAAOc,iBAAiB,CAACZ,UAAD,EAAaC,OAAb,CAAxB;AACD","names":["Decoder","ensureAsyncIterable","defaultDecodeOptions","decodeAsync","streamLike","options","stream","decoder","extensionCodec","context","maxStrLength","maxBinLength","maxArrayLength","maxMapLength","maxExtLength","decodeArrayStream","decodeMultiStream","decodeStream"],"sources":["/Users/j/Code/ore-test-barebones-node-v14/create-react-app/react-app-test/node_modules/@msgpack/msgpack/src/decodeAsync.ts"],"sourcesContent":["import { Decoder } from \"./Decoder\";\nimport { ensureAsyncIterable } from \"./utils/stream\";\nimport { defaultDecodeOptions } from \"./decode\";\nimport type { ReadableStreamLike } from \"./utils/stream\";\nimport type { DecodeOptions } from \"./decode\";\nimport type { SplitUndefined } from \"./context\";\n\nexport async function decodeAsync<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): Promise<unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decodeAsync(stream);\n}\n\nexport function decodeArrayStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): AsyncGenerator<unknown, void, unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeArrayStream(stream);\n}\n\nexport function decodeMultiStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): AsyncGenerator<unknown, void, unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeStream(stream);\n}\n\n/**\n * @deprecated Use {@link decodeMultiStream()} instead.\n */\nexport function decodeStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): AsyncGenerator<unknown, void, unknown> {\n  return decodeMultiStream(streamLike, options);\n}\n"]},"metadata":{},"sourceType":"module"}