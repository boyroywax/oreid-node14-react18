{"ast":null,"code":"// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nimport { DecodeError } from \"./DecodeError.mjs\";\nimport { getInt64, setInt64 } from \"./utils/int.mjs\";\nexport var EXT_TIMESTAMP = -1;\nvar TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\n\nvar TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\n\nexport function encodeTimeSpecToTimestamp(_a) {\n  var sec = _a.sec,\n      nsec = _a.nsec;\n\n  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n    // Here sec >= 0 && nsec >= 0\n    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n      // timestamp 32 = { sec32 (unsigned) }\n      var rv = new Uint8Array(4);\n      var view = new DataView(rv.buffer);\n      view.setUint32(0, sec);\n      return rv;\n    } else {\n      // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n      var secHigh = sec / 0x100000000;\n      var secLow = sec & 0xffffffff;\n      var rv = new Uint8Array(8);\n      var view = new DataView(rv.buffer); // nsec30 | secHigh2\n\n      view.setUint32(0, nsec << 2 | secHigh & 0x3); // secLow32\n\n      view.setUint32(4, secLow);\n      return rv;\n    }\n  } else {\n    // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n    var rv = new Uint8Array(12);\n    var view = new DataView(rv.buffer);\n    view.setUint32(0, nsec);\n    setInt64(view, 4, sec);\n    return rv;\n  }\n}\nexport function encodeDateToTimeSpec(date) {\n  var msec = date.getTime();\n  var sec = Math.floor(msec / 1e3);\n  var nsec = (msec - sec * 1e3) * 1e6; // Normalizes { sec, nsec } to ensure nsec is unsigned.\n\n  var nsecInSec = Math.floor(nsec / 1e9);\n  return {\n    sec: sec + nsecInSec,\n    nsec: nsec - nsecInSec * 1e9\n  };\n}\nexport function encodeTimestampExtension(object) {\n  if (object instanceof Date) {\n    var timeSpec = encodeDateToTimeSpec(object);\n    return encodeTimeSpecToTimestamp(timeSpec);\n  } else {\n    return null;\n  }\n}\nexport function decodeTimestampToTimeSpec(data) {\n  var view = new DataView(data.buffer, data.byteOffset, data.byteLength); // data may be 32, 64, or 96 bits\n\n  switch (data.byteLength) {\n    case 4:\n      {\n        // timestamp 32 = { sec32 }\n        var sec = view.getUint32(0);\n        var nsec = 0;\n        return {\n          sec: sec,\n          nsec: nsec\n        };\n      }\n\n    case 8:\n      {\n        // timestamp 64 = { nsec30, sec34 }\n        var nsec30AndSecHigh2 = view.getUint32(0);\n        var secLow32 = view.getUint32(4);\n        var sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n        var nsec = nsec30AndSecHigh2 >>> 2;\n        return {\n          sec: sec,\n          nsec: nsec\n        };\n      }\n\n    case 12:\n      {\n        // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n        var sec = getInt64(view, 4);\n        var nsec = view.getUint32(0);\n        return {\n          sec: sec,\n          nsec: nsec\n        };\n      }\n\n    default:\n      throw new DecodeError(\"Unrecognized data size for timestamp (expected 4, 8, or 12): \".concat(data.length));\n  }\n}\nexport function decodeTimestampExtension(data) {\n  var timeSpec = decodeTimestampToTimeSpec(data);\n  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\nexport var timestampExtension = {\n  type: EXT_TIMESTAMP,\n  encode: encodeTimestampExtension,\n  decode: decodeTimestampExtension\n};","map":{"version":3,"mappings":"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","names":["DecodeError","getInt64","setInt64","EXT_TIMESTAMP","TIMESTAMP32_MAX_SEC","TIMESTAMP64_MAX_SEC","encodeTimeSpecToTimestamp","_a","sec","nsec","rv","Uint8Array","view","DataView","buffer","setUint32","secHigh","secLow","encodeDateToTimeSpec","date","msec","getTime","Math","floor","nsecInSec","encodeTimestampExtension","object","Date","timeSpec","decodeTimestampToTimeSpec","data","byteOffset","byteLength","getUint32","nsec30AndSecHigh2","secLow32","length","decodeTimestampExtension","timestampExtension","type","encode","decode"],"sources":["/Users/j/Code/ore-test-barebones-node-v14/create-react-app/react-app-test/node_modules/@msgpack/msgpack/src/timestamp.ts"],"sourcesContent":["// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nimport { DecodeError } from \"./DecodeError\";\nimport { getInt64, setInt64 } from \"./utils/int\";\n\nexport const EXT_TIMESTAMP = -1;\n\nexport type TimeSpec = {\n  sec: number;\n  nsec: number;\n};\n\nconst TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nconst TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\n\nexport function encodeTimeSpecToTimestamp({ sec, nsec }: TimeSpec): Uint8Array {\n  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n    // Here sec >= 0 && nsec >= 0\n    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n      // timestamp 32 = { sec32 (unsigned) }\n      const rv = new Uint8Array(4);\n      const view = new DataView(rv.buffer);\n      view.setUint32(0, sec);\n      return rv;\n    } else {\n      // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n      const secHigh = sec / 0x100000000;\n      const secLow = sec & 0xffffffff;\n      const rv = new Uint8Array(8);\n      const view = new DataView(rv.buffer);\n      // nsec30 | secHigh2\n      view.setUint32(0, (nsec << 2) | (secHigh & 0x3));\n      // secLow32\n      view.setUint32(4, secLow);\n      return rv;\n    }\n  } else {\n    // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n    const rv = new Uint8Array(12);\n    const view = new DataView(rv.buffer);\n    view.setUint32(0, nsec);\n    setInt64(view, 4, sec);\n    return rv;\n  }\n}\n\nexport function encodeDateToTimeSpec(date: Date): TimeSpec {\n  const msec = date.getTime();\n  const sec = Math.floor(msec / 1e3);\n  const nsec = (msec - sec * 1e3) * 1e6;\n\n  // Normalizes { sec, nsec } to ensure nsec is unsigned.\n  const nsecInSec = Math.floor(nsec / 1e9);\n  return {\n    sec: sec + nsecInSec,\n    nsec: nsec - nsecInSec * 1e9,\n  };\n}\n\nexport function encodeTimestampExtension(object: unknown): Uint8Array | null {\n  if (object instanceof Date) {\n    const timeSpec = encodeDateToTimeSpec(object);\n    return encodeTimeSpecToTimestamp(timeSpec);\n  } else {\n    return null;\n  }\n}\n\nexport function decodeTimestampToTimeSpec(data: Uint8Array): TimeSpec {\n  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\n  // data may be 32, 64, or 96 bits\n  switch (data.byteLength) {\n    case 4: {\n      // timestamp 32 = { sec32 }\n      const sec = view.getUint32(0);\n      const nsec = 0;\n      return { sec, nsec };\n    }\n    case 8: {\n      // timestamp 64 = { nsec30, sec34 }\n      const nsec30AndSecHigh2 = view.getUint32(0);\n      const secLow32 = view.getUint32(4);\n      const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n      const nsec = nsec30AndSecHigh2 >>> 2;\n      return { sec, nsec };\n    }\n    case 12: {\n      // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n\n      const sec = getInt64(view, 4);\n      const nsec = view.getUint32(0);\n      return { sec, nsec };\n    }\n    default:\n      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);\n  }\n}\n\nexport function decodeTimestampExtension(data: Uint8Array): Date {\n  const timeSpec = decodeTimestampToTimeSpec(data);\n  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\n\nexport const timestampExtension = {\n  type: EXT_TIMESTAMP,\n  encode: encodeTimestampExtension,\n  decode: decodeTimestampExtension,\n};\n"]},"metadata":{},"sourceType":"module"}