{"ast":null,"code":"// ExtensionCodec to handle MessagePack extensions\nimport { ExtData } from \"./ExtData.mjs\";\nimport { timestampExtension } from \"./timestamp.mjs\";\n\nvar ExtensionCodec =\n/** @class */\nfunction () {\n  function ExtensionCodec() {\n    // built-in extensions\n    this.builtInEncoders = [];\n    this.builtInDecoders = []; // custom extensions\n\n    this.encoders = [];\n    this.decoders = [];\n    this.register(timestampExtension);\n  }\n\n  ExtensionCodec.prototype.register = function (_a) {\n    var type = _a.type,\n        encode = _a.encode,\n        decode = _a.decode;\n\n    if (type >= 0) {\n      // custom extensions\n      this.encoders[type] = encode;\n      this.decoders[type] = decode;\n    } else {\n      // built-in extensions\n      var index = 1 + type;\n      this.builtInEncoders[index] = encode;\n      this.builtInDecoders[index] = decode;\n    }\n  };\n\n  ExtensionCodec.prototype.tryToEncode = function (object, context) {\n    // built-in extensions\n    for (var i = 0; i < this.builtInEncoders.length; i++) {\n      var encodeExt = this.builtInEncoders[i];\n\n      if (encodeExt != null) {\n        var data = encodeExt(object, context);\n\n        if (data != null) {\n          var type = -1 - i;\n          return new ExtData(type, data);\n        }\n      }\n    } // custom extensions\n\n\n    for (var i = 0; i < this.encoders.length; i++) {\n      var encodeExt = this.encoders[i];\n\n      if (encodeExt != null) {\n        var data = encodeExt(object, context);\n\n        if (data != null) {\n          var type = i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    if (object instanceof ExtData) {\n      // to keep ExtData as is\n      return object;\n    }\n\n    return null;\n  };\n\n  ExtensionCodec.prototype.decode = function (data, type, context) {\n    var decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n\n    if (decodeExt) {\n      return decodeExt(data, type, context);\n    } else {\n      // decode() does not fail, returns ExtData instead.\n      return new ExtData(type, data);\n    }\n  };\n\n  ExtensionCodec.defaultCodec = new ExtensionCodec();\n  return ExtensionCodec;\n}();\n\nexport { ExtensionCodec };","map":{"version":3,"mappings":"AAAA;AAEA,SAASA,OAAT,QAAwB,eAAxB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;;AAkBA;AAAA;AAAA;EAgBE;IARA;IACiB,uBAA+E,EAA/E;IACA,uBAA+E,EAA/E,CAMjB,CAJA;;IACiB,gBAAwE,EAAxE;IACA,gBAAwE,EAAxE;IAGf,KAAKC,QAAL,CAAcD,kBAAd;EACD;;EAEME,oCAAP,UAAgBC,EAAhB,EAQC;QAPCC,IAAI;QACJC,MAAM;QACNC,MAAM;;IAMN,IAAIF,IAAI,IAAI,CAAZ,EAAe;MACb;MACA,KAAKG,QAAL,CAAcH,IAAd,IAAsBC,MAAtB;MACA,KAAKG,QAAL,CAAcJ,IAAd,IAAsBE,MAAtB;IACD,CAJD,MAIO;MACL;MACA,IAAMG,KAAK,GAAG,IAAIL,IAAlB;MACA,KAAKM,eAAL,CAAqBD,KAArB,IAA8BJ,MAA9B;MACA,KAAKM,eAAL,CAAqBF,KAArB,IAA8BH,MAA9B;IACD;EACF,CAnBM;;EAqBAJ,uCAAP,UAAmBU,MAAnB,EAAoCC,OAApC,EAAwD;IACtD;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,eAAL,CAAqBK,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;MACpD,IAAME,SAAS,GAAG,KAAKN,eAAL,CAAqBI,CAArB,CAAlB;;MACA,IAAIE,SAAS,IAAI,IAAjB,EAAuB;QACrB,IAAMC,IAAI,GAAGD,SAAS,CAACJ,MAAD,EAASC,OAAT,CAAtB;;QACA,IAAII,IAAI,IAAI,IAAZ,EAAkB;UAChB,IAAMb,IAAI,GAAG,CAAC,CAAD,GAAKU,CAAlB;UACA,OAAO,IAAIf,OAAJ,CAAYK,IAAZ,EAAkBa,IAAlB,CAAP;QACD;MACF;IACF,CAXqD,CAatD;;;IACA,KAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKP,QAAL,CAAcQ,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;MAC7C,IAAME,SAAS,GAAG,KAAKT,QAAL,CAAcO,CAAd,CAAlB;;MACA,IAAIE,SAAS,IAAI,IAAjB,EAAuB;QACrB,IAAMC,IAAI,GAAGD,SAAS,CAACJ,MAAD,EAASC,OAAT,CAAtB;;QACA,IAAII,IAAI,IAAI,IAAZ,EAAkB;UAChB,IAAMb,IAAI,GAAGU,CAAb;UACA,OAAO,IAAIf,OAAJ,CAAYK,IAAZ,EAAkBa,IAAlB,CAAP;QACD;MACF;IACF;;IAED,IAAIL,MAAM,YAAYb,OAAtB,EAA+B;MAC7B;MACA,OAAOa,MAAP;IACD;;IACD,OAAO,IAAP;EACD,CA9BM;;EAgCAV,kCAAP,UAAce,IAAd,EAAgCb,IAAhC,EAA8CS,OAA9C,EAAkE;IAChE,IAAMK,SAAS,GAAGd,IAAI,GAAG,CAAP,GAAW,KAAKO,eAAL,CAAqB,CAAC,CAAD,GAAKP,IAA1B,CAAX,GAA6C,KAAKI,QAAL,CAAcJ,IAAd,CAA/D;;IACA,IAAIc,SAAJ,EAAe;MACb,OAAOA,SAAS,CAACD,IAAD,EAAOb,IAAP,EAAaS,OAAb,CAAhB;IACD,CAFD,MAEO;MACL;MACA,OAAO,IAAId,OAAJ,CAAYK,IAAZ,EAAkBa,IAAlB,CAAP;IACD;EACF,CARM;;EAxEgBf,8BAA8C,IAAIA,cAAJ,EAA9C;EAiFzB;AAAC,CAlFD;;SAAaA","names":["ExtData","timestampExtension","register","ExtensionCodec","_a","type","encode","decode","encoders","decoders","index","builtInEncoders","builtInDecoders","object","context","i","length","encodeExt","data","decodeExt"],"sources":["/Users/j/Code/ore-test-barebones-node-v14/create-react-app/react-app-test/node_modules/@msgpack/msgpack/src/ExtensionCodec.ts"],"sourcesContent":["// ExtensionCodec to handle MessagePack extensions\n\nimport { ExtData } from \"./ExtData\";\nimport { timestampExtension } from \"./timestamp\";\n\nexport type ExtensionDecoderType<ContextType> = (\n  data: Uint8Array,\n  extensionType: number,\n  context: ContextType,\n) => unknown;\n\nexport type ExtensionEncoderType<ContextType> = (input: unknown, context: ContextType) => Uint8Array | null;\n\n// immutable interfce to ExtensionCodec\nexport type ExtensionCodecType<ContextType> = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n  tryToEncode(object: unknown, context: ContextType): ExtData | null;\n  decode(data: Uint8Array, extType: number, context: ContextType): unknown;\n};\n\nexport class ExtensionCodec<ContextType = undefined> implements ExtensionCodecType<ContextType> {\n  public static readonly defaultCodec: ExtensionCodecType<undefined> = new ExtensionCodec();\n\n  // ensures ExtensionCodecType<X> matches ExtensionCodec<X>\n  // this will make type errors a lot more clear\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n\n  // built-in extensions\n  private readonly builtInEncoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly builtInDecoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  // custom extensions\n  private readonly encoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly decoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  public constructor() {\n    this.register(timestampExtension);\n  }\n\n  public register({\n    type,\n    encode,\n    decode,\n  }: {\n    type: number;\n    encode: ExtensionEncoderType<ContextType>;\n    decode: ExtensionDecoderType<ContextType>;\n  }): void {\n    if (type >= 0) {\n      // custom extensions\n      this.encoders[type] = encode;\n      this.decoders[type] = decode;\n    } else {\n      // built-in extensions\n      const index = 1 + type;\n      this.builtInEncoders[index] = encode;\n      this.builtInDecoders[index] = decode;\n    }\n  }\n\n  public tryToEncode(object: unknown, context: ContextType): ExtData | null {\n    // built-in extensions\n    for (let i = 0; i < this.builtInEncoders.length; i++) {\n      const encodeExt = this.builtInEncoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = -1 - i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    // custom extensions\n    for (let i = 0; i < this.encoders.length; i++) {\n      const encodeExt = this.encoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    if (object instanceof ExtData) {\n      // to keep ExtData as is\n      return object;\n    }\n    return null;\n  }\n\n  public decode(data: Uint8Array, type: number, context: ContextType): unknown {\n    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n    if (decodeExt) {\n      return decodeExt(data, type, context);\n    } else {\n      // decode() does not fail, returns ExtData instead.\n      return new ExtData(type, data);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}